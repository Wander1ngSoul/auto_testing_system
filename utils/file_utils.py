import pandas as pd
import logging
from openpyxl import load_workbook
import os

from config import *
from generators.report_generator import apply_excel_styles

logger = logging.getLogger(__name__)


def validate_environment():
    errors = []

    required_paths = {
        'FOLDER_TEST': FOLDER_TEST,
        'EXCEL_DATA': EXCEL_DATA,
    }

    if SELECTED_SERVER == 'default':
        if not PROGRAM_SCRIPT:
            errors.append("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è PROGRAM_SCRIPT –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        elif not os.path.exists(PROGRAM_SCRIPT):
            errors.append(f"–ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: PROGRAM_SCRIPT = {PROGRAM_SCRIPT}")
        else:
            required_paths['PROGRAM_SCRIPT'] = PROGRAM_SCRIPT

    for name, path in required_paths.items():
        if not path:
            errors.append(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {name} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        elif not os.path.exists(path):
            errors.append(f"–ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {name} = {path}")

    if errors:
        for error in errors:
            logger.error(error)
        return False

    if not os.listdir(FOLDER_TEST):
        logger.warning(f"–ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ø—É—Å—Ç–∞: {FOLDER_TEST}")

    return True


def load_excel_data(excel_file):
    try:
        dtype_spec = {
            'Series number (reference)': 'string',
            'Model (reference)': 'string',
            'Rate (reference)': 'string',
            'Inidications (reference)': 'string'
        }

        df = pd.read_excel(excel_file, sheet_name='Image Data', dtype=dtype_spec)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω Excel —Ñ–∞–π–ª: {excel_file}, —Å—Ç—Ä–æ–∫: {len(df)}")

        expected_columns = ['Indications Match', 'Series Match', 'Model Match', 'Rate Match', 'Overall Match']
        for col in expected_columns:
            if col not in df.columns:
                df[col] = ''

        return fix_column_data_types(df)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}")
        raise


def fix_column_data_types(df):
    if 'Filename' not in df.columns:
        df.insert(0, 'Filename', '')
    type_mapping = {
        'Filename': 'string',
        'Indications': 'string',
        'Series number': 'string',
        'Model': 'string',
        'Rate': 'string',
        'Inidications (reference)': 'string',
        'Series number (reference)': 'string',
        'Model (reference)': 'string',
        'Rate (reference)': 'string',
        'Indications Match': 'int64',
        'Series Match': 'int64',
        'Model Match': 'int64',
        'Rate Match': 'int64',
        'Overall Match': 'int64'
    }

    for col, dtype in type_mapping.items():
        if col in df.columns:
            try:
                if dtype == 'string':
                    df[col] = df[col].astype(str).apply(
                        lambda x: x if pd.isna(x) else str(x).strip() if x != 'nan' else '')
                # –ü–†–ê–í–ò–õ–¨–ù–û:
                if dtype == 'int64':
                    df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0).astype('int64')
                else:
                    df[col] = df[col].astype(dtype)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ {col} –≤ {dtype}: {e}")
                continue

    return df


def save_excel_progress(df, excel_file, report_data=None):
    try:
        logger.info(f"üíæ –ù–ê–ß–ò–ù–ê–ï–ú –°–û–•–†–ê–ù–ï–ù–ò–ï EXCEL: {excel_file}")
        logger.info(f"üìä –†–∞–∑–º–µ—Ä DataFrame: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")


        if df.empty:
            logger.warning("‚ö†Ô∏è DataFrame –ø—É—Å—Ç–æ–π!")
            return False
        if len(df) > 0:
            last_rows = df.tail(3)
            logger.info(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Ç—Ä–æ–∫–∏ –≤ DataFrame:")
            for idx, row in last_rows.iterrows():
                logger.info(f"   –°—Ç—Ä–æ–∫–∞ {idx}: Indications='{row.get('Indications', '')}', "
                            f"Series='{row.get('Series number', '')}', "
                            f"Model='{row.get('Model', '')}'")

        temp_file = excel_file.replace('.xlsx', '_temp.xlsx')
        logger.info(f"üîÑ –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")

        with pd.ExcelWriter(temp_file, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='Image Data', index=False)

        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª")

        wb = load_workbook(temp_file)
        logger.info(f"üé® –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ Excel")
        apply_excel_styles(wb, excel_file)

        if report_data:
            from generators.summary_report import create_summary_sheet
            logger.info(f"üìà –î–æ–±–∞–≤–ª—è–µ–º summary report")
            create_summary_sheet(wb, report_data)

        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {excel_file}")
        wb.save(excel_file)
        logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {excel_file}")

        if os.path.exists(temp_file):
            os.remove(temp_file)
            logger.info(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

        logger.info(f"üéâ Excel —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –≥–æ—Ç–æ–≤!")
        return True

    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel: {str(e)}")
        logger.exception("–ü–æ–ª–Ω—ã–π traceback:")
        return False


def get_image_files(images_folder):
    return [f for f in os.listdir(images_folder)
            if f.lower().endswith(SUPPORTED_IMAGE_EXTENSIONS)]